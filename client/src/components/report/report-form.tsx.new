import { useState } from "react";
import { format } from "date-fns";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import ClassicEditor from "@ckeditor/ckeditor5-build-classic";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

// Rapor t√ºrleri
const reportTypes = [
  { id: "daily", name: "G√ºnl√ºk Rapor" },
  { id: "weekly", name: "Haftalƒ±k Rapor" },
  { id: "monthly", name: "Aylƒ±k Rapor" },
  { id: "issue", name: "Sorun Bildirimi" },
  { id: "maintenance", name: "Bakƒ±m Raporu" },
];

interface ReportFormProps {
  defaultValues?: any;
  onSubmit: (data: any) => void;
  projects: any[];
  isSubmitting: boolean;
}

export function ReportForm({
  defaultValues,
  onSubmit,
  projects,
  isSubmitting,
}: ReportFormProps) {
  const [previewMode, setPreviewMode] = useState(false);
  const [formData, setFormData] = useState({
    title: defaultValues?.title || "",
    location: defaultValues?.location || "",
    description: defaultValues?.description || "",
    projectId: defaultValues?.projectId?.toString() || "",
    reportType: defaultValues?.reportType || "daily",
    files: defaultValues?.files || [],
    reportDate: defaultValues?.reportDate || format(new Date(), "yyyy-MM-dd"),
  });

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleEditorChange = (data: string) => {
    setFormData((prev) => ({ ...prev, description: data }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Verileri d√ºzenle (projectId i√ßin number d√∂n√º≈ü√ºm√º yapƒ±lƒ±yor)
    const submissionData = {
      ...formData,
      projectId: formData.projectId ? parseInt(formData.projectId) : null,
    };

    onSubmit(submissionData);
  };

  return (
    <div className="max-w-full w-full overflow-hidden">
      <form onSubmit={handleSubmit} className="space-y-6 w-full">
        <div className="grid grid-cols-1 gap-5 w-full">
          {/* Rapor ba≈ülƒ±ƒüƒ± */}
          <div className="space-y-2 w-full">
            <Label htmlFor="title" className="block text-sm font-medium">Rapor Ba≈ülƒ±ƒüƒ±</Label>
            <Input
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              placeholder="Rapor ba≈ülƒ±ƒüƒ±nƒ± girin"
              required
              className="w-full box-border"
            />
          </div>

          {/* Rapor tarihi */}
          <div className="space-y-2 w-full">
            <Label htmlFor="reportDate" className="block text-sm font-medium">Rapor Tarihi</Label>
            <Input
              id="reportDate"
              name="reportDate"
              type="date"
              value={formData.reportDate}
              onChange={handleChange}
              required
              className="w-full box-border"
            />
          </div>

          {/* Rapor t√ºr√º ve proje - grid i√ßinde yan yana */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-5 w-full">
            <div className="space-y-2 w-full">
              <Label htmlFor="reportType" className="block text-sm font-medium">Rapor T√ºr√º</Label>
              <Select
                value={formData.reportType}
                onValueChange={(value) => handleSelectChange("reportType", value)}
              >
                <SelectTrigger className="w-full box-border">
                  <SelectValue placeholder="Rapor t√ºr√ºn√º se√ßin" />
                </SelectTrigger>
                <SelectContent>
                  {reportTypes.map((type) => (
                    <SelectItem key={type.id} value={type.id}>
                      {type.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2 w-full">
              <Label htmlFor="projectId" className="block text-sm font-medium">ƒ∞lgili Proje</Label>
              <Select
                value={formData.projectId}
                onValueChange={(value) => handleSelectChange("projectId", value)}
              >
                <SelectTrigger className="w-full box-border">
                  <SelectValue placeholder="Proje se√ßin (opsiyonel)" />
                </SelectTrigger>
                <SelectContent>
                  {projects?.map((project) => (
                    <SelectItem key={project.id} value={project.id.toString()}>
                      {project.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Konum */}
          <div className="space-y-2 w-full">
            <Label htmlFor="location" className="block text-sm font-medium">Konum</Label>
            <Input
              id="location"
              name="location"
              value={formData.location}
              onChange={handleChange}
              placeholder="Rapor konumunu girin (opsiyonel)"
              className="w-full box-border"
            />
          </div>

          {/* A√ßƒ±klama - CKEditor */}
          <div className="space-y-2 w-full">
            <Label htmlFor="description" className="block text-sm font-medium">A√ßƒ±klama</Label>
            <div className="border rounded-md overflow-hidden w-full box-border">
              <div className="w-full max-w-full" style={{ 
                boxSizing: 'border-box',
                overflowX: 'hidden'
              }}>
                <CKEditor
                  editor={ClassicEditor}
                  data={formData.description || ""}
                  onChange={(event: any, editor: any) => {
                    const data = editor.getData();
                    handleEditorChange(data);
                  }}
                  config={{
                    toolbar: {
                      items: [
                        "heading",
                        "|",
                        "bold",
                        "italic",
                        "link",
                        "|",
                        "bulletedList",
                        "numberedList",
                        "|",
                        "outdent",
                        "indent",
                        "|",
                        "blockQuote",
                        "insertTable",
                        "imageUpload",
                        "|",
                        "undo",
                        "redo",
                      ],
                      shouldNotGroupWhenFull: true
                    },
                    language: "tr",
                    placeholder:
                      "Rapor detaylarƒ±nƒ± girin (zengin metin d√ºzenleme √∂zelliklerini kullanabilirsiniz)",
                    image: {
                      toolbar: [
                        "imageTextAlternative",
                        "imageStyle:inline",
                        "imageStyle:block",
                        "imageStyle:side",
                      ],
                    },
                  }}
                />
              </div>
            </div>
          </div>

          {/* Dosya y√ºkleme (ileri versiyonlarda eklenecek) */}
          <div className="space-y-2 w-full">
            <Label htmlFor="files" className="block text-sm font-medium">Dosyalar</Label>
            <div className="p-4 border border-dashed rounded-md text-center text-muted-foreground w-full box-border">
              <p>Dosya y√ºkleme √∂zelliƒüi yakƒ±nda eklenecek</p>
            </div>
          </div>

          {/* √ñnizleme ve Yazdƒ±rma Butonlarƒ± */}
          <div className="flex flex-wrap gap-2 w-full mt-2">
            <Button
              type="button"
              variant="outline"
              className="flex items-center gap-2"
              onClick={() => setPreviewMode(!previewMode)}
            >
              <span role="img" aria-label="√ñnizleme">
                üîç
              </span>
              {previewMode ? "D√ºzenlemeye D√∂n" : "Raporu √ñnizle"}
            </Button>

            {previewMode && (
              <Button
                type="button"
                variant="outline"
                className="flex items-center gap-2"
                onClick={() => {
                  const printWindow = window.open("", "_blank");
                  if (printWindow) {
                    printWindow.document.write(`
                      <html>
                        <head>
                          <title>${formData.title || "Rapor"}</title>
                          <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            h1 { font-size: 24px; margin-bottom: 10px; }
                            .report-date { color: #666; margin-bottom: 20px; }
                            .report-content { line-height: 1.5; }
                          </style>
                        </head>
                        <body>
                          <h1>${formData.title || "Rapor"}</h1>
                          <div class="report-date">Tarih: ${
                            formData.reportDate
                          }</div>
                          <div class="report-content">${
                            formData.description || ""
                          }</div>
                        </body>
                      </html>
                    `);
                    printWindow.document.close();
                    printWindow.print();
                  }
                }}
              >
                <span role="img" aria-label="Yazdƒ±r">
                  üñ®Ô∏è
                </span>{" "}
                Yazdƒ±r
              </Button>
            )}
          </div>

          {/* √ñnizleme Paneli */}
          {previewMode && (
            <div className="p-4 border rounded-md bg-white w-full box-border">
              <h3 className="text-lg font-medium mb-2">
                {formData.title || "Rapor"}
              </h3>
              <div className="text-sm text-gray-500 mb-4">
                Tarih: {formData.reportDate}
              </div>
              <div
                className="prose prose-sm max-w-none"
                dangerouslySetInnerHTML={{ __html: formData.description || "" }}
              />
            </div>
          )}

          {/* Kaydet/G√ºncelle Butonu */}
          <div className="w-full">
            <Button
              type="submit"
              className="w-full py-5"
              disabled={isSubmitting}
            >
              {isSubmitting
                ? "Kaydediliyor..."
                : defaultValues
                ? "Raporu G√ºncelle"
                : "Raporu Kaydet"}
            </Button>
          </div>
        </div>
      </form>
    </div>
  );
}